#include "MallocBinnedInsightsComponent.h"

#include "MallocBinnedInsightsStyle.h"

#define LOCTEXT_NAMESPACE "FMallocBinnedInsightsComponent"

namespace UE::Insights::MemoryProfiler::MallocBinned
{
	namespace ComponentPrivate
	{
		static const FName TabName = "MallocBinned2 Insights";
	}

	TSharedPtr<FMallocBinnedInsightsComponent> FMallocBinnedInsightsComponent::CreateInstance()
	{
		ensure(!Instance.IsValid());

		// Not initializing locally to avoid thread local storage code generated by teh compiler
		if (!Instance)
		{
			Instance = MakeShared<FMallocBinnedInsightsComponent>();
		}

		return Instance;
	}

	void FMallocBinnedInsightsComponent::Initialize(IUnrealInsightsModule& Module)
	{
		bIsInitialized = true;
	}

	void FMallocBinnedInsightsComponent::Shutdown()
	{
		if (!bIsInitialized)
		{
			return;
		}
		bIsInitialized = false;

		Instance.Reset();
	}

	void FMallocBinnedInsightsComponent::RegisterMajorTabs(IUnrealInsightsModule& InsightsModule)
	{
		using namespace ComponentPrivate;

		const FInsightsMajorTabConfig& Config = InsightsModule.FindMajorTabConfig(TabName);

		if (Config.bIsAvailable)
		{
			// Register tab spawner for the malloc binned Insights.
			FTabSpawnerEntry& TabSpawnerEntry = FGlobalTabmanager::Get()->RegisterNomadTabSpawner(TabName,
				FOnSpawnTab::CreateRaw(this,  &FMallocBinnedInsightsComponent::SpawnTab), 
				FCanSpawnTab::CreateRaw(this, &FMallocBinnedInsightsComponent::CanSpawnTab))
				.SetDisplayName(Config.TabLabel.IsSet()   ? Config.TabLabel.GetValue()   : LOCTEXT("MallocBinnedInsights_TabTitle", "MallocBinned2 Insights"))
				.SetTooltipText(Config.TabTooltip.IsSet() ? Config.TabTooltip.GetValue() : LOCTEXT("MallocBinnedInsights_TooltipText", "Open the MallocBinned2 Insights tab"))
				.SetIcon(Config.TabTooltip.IsSet() ? Config.TabIcon.GetValue() : FSlateStyle::Get().CreateIcon("MallocBinnedInsights.Icon"));

			// Find the "Insights Tools" group, in the Menu dropdown
			const TSharedRef<FWorkspaceItem>* FoundWorkspace = FGlobalTabmanager::Get()->GetLocalWorkspaceMenuRoot()->GetChildItems().FindByPredicate(
				[](const TSharedRef<FWorkspaceItem>& WorkspaceItem)
				{
					return WorkspaceItem->GetDisplayName().ToString() == "Insights Tools";
				});

			if (FoundWorkspace)
			{
				TabSpawnerEntry.SetGroup(*FoundWorkspace);
			}
		}
	}

	void FMallocBinnedInsightsComponent::UnregisterMajorTabs()
	{
		FGlobalTabmanager::Get()->UnregisterNomadTabSpawner(ComponentPrivate::TabName);
	}

	bool FMallocBinnedInsightsComponent::CanSpawnTab(const FSpawnTabArgs& Args) const
	{
		return true;
	}

	TSharedRef<SDockTab> FMallocBinnedInsightsComponent::SpawnTab(const FSpawnTabArgs& Args)
	{
		const TSharedRef<SDockTab> DockTab = SNew(SDockTab)
			.Label(LOCTEXT("MallocBinnedInsights_TabTitle", "MallocBinned2 Insights"))
			.Clipping(EWidgetClipping::ClipToBounds)
			.TabRole(ETabRole::NomadTab);
		return DockTab;
	}
}

#undef LOCTEXT_NAMESPACE
